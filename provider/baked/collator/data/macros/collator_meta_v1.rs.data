// @generated
/// Implement `DataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collator_meta_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationMetadataV1Marker>, icu_provider::DataError> {
                static FR_CA: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 129u32 };
                static DA: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 1545u32 };
                static AST: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 1u32 };
                static VI: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 25u32 };
                static TH: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 297u32 };
                static AM: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 33u32 };
                static AR: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 41u32 };
                static LT: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 73u32 };
                static AF: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 9u32 };
                static VALUES: [&<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::Yokeable; 161usize
                static KEYS: [&str; 161usize] = ["af", "am", "ar", "as", "ast", "az", "be", "bg", "bgc", "bho", "blo", "bn", "br", "brx", "bs", "bs-Cyrl", "ca", "ceb", "chr", "cs", "csw", "cv", "cy", "da", "de", "de-u-co-phonebk", "doi", "dsb", "el", "en", "en-US-posix", "eo", "es", "et", "eu", "fa", "ff-Adlm", "fi", "fil", "fo", "fr", "fr-CA", "fy", "ga", "gd", "gl", "gu", "ha", "he", "hi", "hr", "hsb", "hu", "hy", "ia", "id", "ie", "ig", "is", "it", "ja", "jv", "ka", "kea", "kgp", "kk", "km", "kn", "ko", "kok", "ks", "ks-Deva", "ku", "kxv", "kxv-Deva", "kxv-Orya", "kxv-Telu", "ky", "lb", "lij", "lmo", "lo", "lt", "lv", "mai", "mi", "mk", "ml", "mn", "mni", "mr", "ms", "mt", "my", "nds", "ne", "nl", "no", "nqo", "oc", "or", "pa", "pcm", "pl", "prg", "ps", "pt", "qu", "raj", "rm", "ro", "ru", "sa", "sah", "sat", "sc", "sd", "sd-Deva", "si", "sk", "sl", "so", "sq", "sr", "sr-Latn", "su", "sv", "sw", "syr", "szl", "ta", "te", "tg", "th", "ti", "tk", "to", "tok", "tr", "tt", "ug", "uk", "und", "und-u-co-emoji", "und-u-co-eor", "ur", "uz", "uz-Cyrl", "vec", "vi", "vmw", "wo", "xh", "xnr", "yo", "yrl", "yue-Hans", "za", "zh", "zh-Hant", "zu"];
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Ok(payload) = KEYS.binary_search_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    payload
                } else {
                    const FALLBACKER: icu::locid_transform::fallback::LocaleFallbackerWithConfig<'static> = icu::locid_transform::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::KeyedDataMarker>::KEY.fallback_config());
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.locale.clone());
                    loop {
                        if let Ok(payload) = KEYS.binary_search_by(|k| fallback_iterator.get().strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::KeyedDataMarker>::KEY, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata })
            }
        }
    };
}
