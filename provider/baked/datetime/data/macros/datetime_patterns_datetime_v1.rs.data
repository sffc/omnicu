// @generated
/// Implement `DataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_patterns_datetime_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DateTimePatternV1Marker>, icu_provider::DataError> {
                static QU_X_L: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } };
                static EU_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } };
                static EL_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } };
                static NN_X_L: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } };
                static XNR_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } };
                static AF_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } };
                static AST_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } };
                static FA_X_M: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } };
                static FA_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } };
                static AR_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } };
                static VALUES: [&<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::Yokeable; 689usize
                static KEYS: [&str; 689usize] = ["af-x-f", "af-x-l", "af-x-m", "af-x-s", "am-x-f", "am-x-l", "am-x-m", "am-x-s", "ar-x-f", "ar-x-l", "ar-x-m", "ar-x-s", "as-x-f", "as-x-l", "as-x-m", "as-x-s", "ast-x-f", "ast-x-l", "ast-x-m", "ast-x-s", "az-x-f", "az-x-l", "az-x-m", "az-x-s", "be-x-f", "be-x-l", "be-x-m", "be-x-s", "bg-x-f", "bg-x-l", "bg-x-m", "bg-x-s", "bgc-x-f", "bgc-x-l", "bgc-x-m", "bgc-x-s", "bho-x-f", "bho-x-l", "bho-x-m", "bho-x-s", "blo-x-f", "blo-x-l", "blo-x-m", "blo-x-s", "bn-x-f", "bn-x-l", "bn-x-m", "bn-x-s", "br-x-f", "br-x-l", "br-x-m", "br-x-s", "brx-x-f", "brx-x-l", "brx-x-m", "brx-x-s", "bs-Cyrl-x-f", "bs-Cyrl-x-l", "bs-Cyrl-x-m", "bs-Cyrl-x-s", "bs-x-f", "bs-x-l", "bs-x-m", "bs-x-s", "ca-x-f", "ca-x-l", "ca-x-m", "ca-x-s", "ceb-x-f", "ceb-x-l", "ceb-x-m", "ceb-x-s", "chr-x-f", "chr-x-l", "chr-x-m", "chr-x-s", "cs-x-f", "cs-x-l", "cs-x-m", "cs-x-s", "csw-x-f", "csw-x-l", "csw-x-m", "csw-x-s", "cv-x-f", "cv-x-l", "cv-x-m", "cv-x-s", "cy-x-f", "cy-x-l", "cy-x-m", "cy-x-s", "da-x-f", "da-x-l", "da-x-m", "da-x-s", "de-x-f", "de-x-l", "de-x-m", "de-x-s", "doi-x-f", "doi-x-l", "doi-x-m", "doi-x-s", "dsb-x-f", "dsb-x-l", "dsb-x-m", "dsb-x-s", "el-x-f", "el-x-l", "el-x-m", "el-x-s", "en-MV-x-f", "en-MV-x-l", "en-MV-x-m", "en-MV-x-s", "en-x-f", "en-x-l", "en-x-m", "en-x-s", "eo-x-f", "eo-x-l", "eo-x-m", "eo-x-s", "es-x-f", "es-x-l", "es-x-m", "es-x-s", "et-x-f", "et-x-l", "et-x-m", "et-x-s", "eu-x-f", "eu-x-l", "eu-x-m", "eu-x-s", "fa-x-f", "fa-x-l", "fa-x-m", "fa-x-s", "ff-Adlm-x-f", "ff-Adlm-x-l", "ff-Adlm-x-m", "ff-Adlm-x-s", "fi-x-f", "fi-x-l", "fi-x-m", "fi-x-s", "fil-x-f", "fil-x-l", "fil-x-m", "fil-x-s", "fo-x-f", "fo-x-l", "fo-x-m", "fo-x-s", "fr-ML-x-s", "fr-x-f", "fr-x-l", "fr-x-m", "fr-x-s", "fy-x-f", "fy-x-l", "fy-x-m", "fy-x-s", "ga-x-f", "ga-x-l", "ga-x-m", "ga-x-s", "gd-x-f", "gd-x-l", "gd-x-m", "gd-x-s", "gl-x-f", "gl-x-l", "gl-x-m", "gl-x-s", "gu-x-f", "gu-x-l", "gu-x-m", "gu-x-s", "ha-x-f", "ha-x-l", "ha-x-m", "ha-x-s", "he-x-f", "he-x-l", "he-x-m", "he-x-s", "hi-Latn-x-f", "hi-Latn-x-l", "hi-Latn-x-m", "hi-Latn-x-s", "hi-x-f", "hi-x-l", "hi-x-m", "hi-x-s", "hr-x-f", "hr-x-l", "hr-x-m", "hr-x-s", "hsb-x-f", "hsb-x-l", "hsb-x-m", "hsb-x-s", "hu-x-f", "hu-x-l", "hu-x-m", "hu-x-s", "hy-x-f", "hy-x-l", "hy-x-m", "hy-x-s", "ia-x-f", "ia-x-l", "ia-x-m", "ia-x-s", "id-x-f", "id-x-l", "id-x-m", "id-x-s", "ie-x-f", "ie-x-l", "ie-x-m", "ie-x-s", "ig-x-f", "ig-x-l", "ig-x-m", "ig-x-s", "is-x-f", "is-x-l", "is-x-m", "is-x-s", "it-x-f", "it-x-l", "it-x-m", "it-x-s", "ja-x-f", "ja-x-l", "ja-x-m", "ja-x-s", "jv-x-f", "jv-x-l", "jv-x-m", "jv-x-s", "ka-x-f", "ka-x-l", "ka-x-m", "ka-x-s", "kea-x-f", "kea-x-l", "kea-x-m", "kea-x-s", "kgp-x-f", "kgp-x-l", "kgp-x-m", "kgp-x-s", "kk-x-f", "kk-x-l", "kk-x-m", "kk-x-s", "km-x-f", "km-x-l", "km-x-m", "km-x-s", "kn-x-f", "kn-x-l", "kn-x-m", "kn-x-s", "ko-x-f", "ko-x-l", "ko-x-m", "ko-x-s", "kok-x-f", "kok-x-l", "kok-x-m", "kok-x-s", "ks-Deva-x-f", "ks-Deva-x-l", "ks-Deva-x-m", "ks-Deva-x-s", "ks-x-f", "ks-x-l", "ks-x-m", "ks-x-s", "ku-x-f", "ku-x-l", "ku-x-m", "ku-x-s", "kxv-Deva-x-f", "kxv-Deva-x-l", "kxv-Deva-x-m", "kxv-Deva-x-s", "kxv-Orya-x-f", "kxv-Orya-x-l", "kxv-Orya-x-m", "kxv-Orya-x-s", "kxv-Telu-x-f", "kxv-Telu-x-l", "kxv-Telu-x-m", "kxv-Telu-x-s", "kxv-x-f", "kxv-x-l", "kxv-x-m", "kxv-x-s", "ky-x-f", "ky-x-l", "ky-x-m", "ky-x-s", "lb-x-f", "lb-x-l", "lb-x-m", "lb-x-s", "lij-x-f", "lij-x-l", "lij-x-m", "lij-x-s", "lmo-x-f", "lmo-x-l", "lmo-x-m", "lmo-x-s", "lo-x-f", "lo-x-l", "lo-x-m", "lo-x-s", "lt-x-f", "lt-x-l", "lt-x-m", "lt-x-s", "lv-x-f", "lv-x-l", "lv-x-m", "lv-x-s", "mai-x-f", "mai-x-l", "mai-x-m", "mai-x-s", "mi-x-f", "mi-x-l", "mi-x-m", "mi-x-s", "mk-x-f", "mk-x-l", "mk-x-m", "mk-x-s", "ml-x-f", "ml-x-l", "ml-x-m", "ml-x-s", "mn-x-f", "mn-x-l", "mn-x-m", "mn-x-s", "mni-x-f", "mni-x-l", "mni-x-m", "mni-x-s", "mr-x-f", "mr-x-l", "mr-x-m", "mr-x-s", "ms-x-f", "ms-x-l", "ms-x-m", "ms-x-s", "mt-x-f", "mt-x-l", "mt-x-m", "mt-x-s", "my-x-f", "my-x-l", "my-x-m", "my-x-s", "nb-x-f", "nb-x-l", "nb-x-m", "nb-x-s", "nds-x-f", "nds-x-l", "nds-x-m", "nds-x-s", "ne-x-f", "ne-x-l", "ne-x-m", "ne-x-s", "nl-x-f", "nl-x-l", "nl-x-m", "nl-x-s", "nn-x-f", "nn-x-l", "nn-x-m", "nn-x-s", "no-x-f", "no-x-l", "no-x-m", "no-x-s", "nqo-x-f", "nqo-x-l", "nqo-x-m", "nqo-x-s", "oc-x-f", "oc-x-l", "oc-x-m", "oc-x-s", "or-x-f", "or-x-l", "or-x-m", "or-x-s", "pa-x-f", "pa-x-l", "pa-x-m", "pa-x-s", "pcm-x-f", "pcm-x-l", "pcm-x-m", "pcm-x-s", "pl-x-f", "pl-x-l", "pl-x-m", "pl-x-s", "prg-x-f", "prg-x-l", "prg-x-m", "prg-x-s", "ps-x-f", "ps-x-l", "ps-x-m", "ps-x-s", "pt-AO-x-f", "pt-AO-x-l", "pt-AO-x-m", "pt-AO-x-s", "pt-CH-x-f", "pt-CH-x-l", "pt-CH-x-m", "pt-CH-x-s", "pt-CV-x-f", "pt-CV-x-l", "pt-CV-x-m", "pt-CV-x-s", "pt-GQ-x-f", "pt-GQ-x-l", "pt-GQ-x-m", "pt-GQ-x-s", "pt-GW-x-f", "pt-GW-x-l", "pt-GW-x-m", "pt-GW-x-s", "pt-LU-x-f", "pt-LU-x-l", "pt-LU-x-m", "pt-LU-x-s", "pt-MO-x-f", "pt-MO-x-l", "pt-MO-x-m", "pt-MO-x-s", "pt-MZ-x-f", "pt-MZ-x-l", "pt-MZ-x-m", "pt-MZ-x-s", "pt-PT-x-f", "pt-PT-x-l", "pt-PT-x-m", "pt-PT-x-s", "pt-ST-x-f", "pt-ST-x-l", "pt-ST-x-m", "pt-ST-x-s", "pt-TL-x-f", "pt-TL-x-l", "pt-TL-x-m", "pt-TL-x-s", "pt-x-f", "pt-x-l", "pt-x-m", "pt-x-s", "qu-x-f", "qu-x-l", "qu-x-m", "qu-x-s", "raj-x-f", "raj-x-l", "raj-x-m", "raj-x-s", "rm-x-f", "rm-x-l", "rm-x-m", "rm-x-s", "ro-x-f", "ro-x-l", "ro-x-m", "ro-x-s", "ru-x-f", "ru-x-l", "ru-x-m", "ru-x-s", "sa-x-f", "sa-x-l", "sa-x-m", "sa-x-s", "sah-x-f", "sah-x-l", "sah-x-m", "sah-x-s", "sat-x-f", "sat-x-l", "sat-x-m", "sat-x-s", "sc-x-f", "sc-x-l", "sc-x-m", "sc-x-s", "sd-Deva-x-f", "sd-Deva-x-l", "sd-Deva-x-m", "sd-Deva-x-s", "sd-x-f", "sd-x-l", "sd-x-m", "sd-x-s", "si-x-f", "si-x-l", "si-x-m", "si-x-s", "sk-x-f", "sk-x-l", "sk-x-m", "sk-x-s", "sl-x-f", "sl-x-l", "sl-x-m", "sl-x-s", "so-x-f", "so-x-l", "so-x-m", "so-x-s", "sq-x-f", "sq-x-l", "sq-x-m", "sq-x-s", "sr-Latn-x-f", "sr-Latn-x-l", "sr-Latn-x-m", "sr-Latn-x-s", "sr-x-f", "sr-x-l", "sr-x-m", "sr-x-s", "su-x-f", "su-x-l", "su-x-m", "su-x-s", "sv-x-f", "sv-x-l", "sv-x-m", "sv-x-s", "sw-x-f", "sw-x-l", "sw-x-m", "sw-x-s", "syr-x-f", "syr-x-l", "syr-x-m", "syr-x-s", "szl-x-f", "szl-x-l", "szl-x-m", "szl-x-s", "ta-x-f", "ta-x-l", "ta-x-m", "ta-x-s", "te-x-f", "te-x-l", "te-x-m", "te-x-s", "tg-x-f", "tg-x-l", "tg-x-m", "tg-x-s", "th-x-f", "th-x-l", "th-x-m", "th-x-s", "ti-x-f", "ti-x-l", "ti-x-m", "ti-x-s", "tk-x-f", "tk-x-l", "tk-x-m", "tk-x-s", "to-x-f", "to-x-l", "to-x-m", "to-x-s", "tok-x-f", "tok-x-l", "tok-x-m", "tok-x-s", "tr-x-f", "tr-x-l", "tr-x-m", "tr-x-s", "tt-x-f", "tt-x-l", "tt-x-m", "tt-x-s", "ug-x-f", "ug-x-l", "ug-x-m", "ug-x-s", "uk-x-f", "uk-x-l", "uk-x-m", "uk-x-s", "und-x-f", "und-x-l", "und-x-m", "und-x-s", "ur-x-f", "ur-x-l", "ur-x-m", "ur-x-s", "uz-Cyrl-x-f", "uz-Cyrl-x-l", "uz-Cyrl-x-m", "uz-Cyrl-x-s", "uz-x-f", "uz-x-l", "uz-x-m", "uz-x-s", "vec-x-f", "vec-x-l", "vec-x-m", "vec-x-s", "vi-x-f", "vi-x-l", "vi-x-m", "vi-x-s", "vmw-x-f", "vmw-x-l", "vmw-x-m", "vmw-x-s", "wo-x-f", "wo-x-l", "wo-x-m", "wo-x-s", "xh-x-f", "xh-x-l", "xh-x-m", "xh-x-s", "xnr-x-f", "xnr-x-l", "xnr-x-m", "xnr-x-s", "yo-x-f", "yo-x-l", "yo-x-m", "yo-x-s", "yrl-x-f", "yrl-x-l", "yrl-x-m", "yrl-x-s", "yue-Hans-x-f", "yue-Hans-x-l", "yue-Hans-x-m", "yue-Hans-x-s", "yue-x-f", "yue-x-l", "yue-x-m", "yue-x-s", "za-x-f", "za-x-l", "za-x-m", "za-x-s", "zh-Hant-x-f", "zh-Hant-x-l", "zh-Hant-x-m", "zh-Hant-x-s", "zh-x-f", "zh-x-l", "zh-x-m", "zh-x-s", "zu-x-f", "zu-x-l", "zu-x-m", "zu-x-s"];
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Ok(payload) = KEYS.binary_search_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    payload
                } else {
                    const FALLBACKER: icu::locid_transform::fallback::LocaleFallbackerWithConfig<'static> = icu::locid_transform::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::KeyedDataMarker>::KEY.fallback_config());
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.locale.clone());
                    loop {
                        if let Ok(payload) = KEYS.binary_search_by(|k| fallback_iterator.get().strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::KeyedDataMarker>::KEY, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata })
            }
        }
    };
}
